#*********************************************************************#
#                                                                     #
#                          Caml Images                                #
#                                                                     #
#            Franè¼Ÿis Pessaux, projet Cristal, INRIA Rocquencourt     #
#            Pierre Weis, projet Cristal, INRIA Rocquencourt          #
#            Jun Furuse, projet Cristal, INRIA Rocquencourt           #
#                                                                     #
#  Copyright 1999-2004,                                               #
#  Institut National de Recherche en Informatique et en Automatique.  #
#  Distributed only by permission.                                    #
#                                                                     #
#*********************************************************************#

open build/C
open build/OCaml
open build/LaTeX

DefineCommandVars()

######################################################################## tools

USE_OCAMLFIND = true

if $(not $(OCAMLFIND_EXISTS))
   eprintln(This project requires ocamlfind, but is was not found.)
   eprintln(You need to install ocamlfind and run "omake --configure".)
   exit 1

OCAML_WHERE = $(shell ocamlc -where)

##################################################################### configure

open configure/Configure

Check_header(header) =
  ConfMsgChecking($(header))
  ConfMsgFound($(CheckCHeader $(header)))

Check_library(lib, func) =
  ConfMsgChecking($(func) in -l$(lib))
  ConfMsgFound($(CheckCLib $(lib), $(func)))

Check_header_library(xlib, xheader, xfunc) =
  return $(and $(Check_header $(xheader)), $(Check_library $(xlib), $(xfunc)))

Have_library(libname, lib, header, func) =
  setvar(this.HAVE_$(libname), $(Check_header_library $(lib), $(header), $(func)))
  export

Check_ocamlfind_package(package) = 
  ConfMsgChecking($(package))
  ConfMsgFound($(shell-success ocamlfind query $(package)))

Check_pkg_config(package, option) =
  ConfMsgChecking(Freetype)
  ConfMsgFound($(shell-success $(package)-config $(option)))

# export $(WHERE)
Check_prog_in_path(prog) =
   ConfMsgChecking(for $(prog))
   WHERE = $(where $(prog))
   if $(WHERE)
      WHERE = $(nth 0, $(WHERE))
      export WHERE
      ConfMsgResult(found $(WHERE))
      return true
   else
      WHERE = 
      export WHERE
      ConfMsgResult(FAILED - no $(prog) found)
      return false
   export WHERE

# export $(WHERE)
Check_file_in_path(path, file) =
  ConfMsgChecking(for $(file))
  WHERE = $(find-in-path-optional $(path), $(file))
  export WHERE
  if $(WHERE)
    WHERE = $(nth 0, $(WHERE))
    export WHERE
    ConfMsgResult(found $(WHERE))
    return true
  else
    WHERE =
    export WHERE
    ConfMsgResult(FAILED - no $(file) found)
    return false
  export WHERE

# Return the size of word in bytes. Uses omake's arithmetic which depends
# on OCaml's int
Word_size() =
  if $(lt $(add $(int 1073741823) $(int 1)), $(int 0))
    value 4
  else
    value 8

#################################################################### build rule

# annot, spot, spit files
%.annot %.spot: %.ml %.cmi
	$(OCamlC) -c $<

%.spit: %.mli 
	$(OCamlC) -c $<

# of course it only works with unix
OCamlMkLibC(name, files) =
  protected.COBJS=$(addsuffix .o, $(files))
  dll$(name).so lib$(name).a: $(COBJS)
    $(OCAMLMKLIB) -o $(name) $(LDFLAGS) $(COBJS)
  return $(array dll$(name).so, lib$(name).a)

################################################################ config replace

ConfReplaceAt(file)=
  $(file): $(file).in
    section: # I dunno but section is required
      stdout = $(fopen $(file), w)
      fsubst($(file).in)
      case $"@\([A-Z0-9_]+\)@" g
        getvar($1)
      close($(stdout))

ConfReplaceConfigH(file)=
  $(file): $(file).in
    section: # I dunno but section is required
      stdout = $(fopen $(file), w)
      fsubst($(file).in)
      case $"#undef \([A-Z_0-9]+\)" g
        try
          v=$(getvar $1)
          value $"#define $1 $(v)"
        default
          value $"/* undef $1 */"
      close($(stdout))

##################################################################### directory

ROOT = $(dir .)
SRCDIR = $(ROOT)/src

################################################################### local build

Subpackages_available(packs) =
  sequence-forall(elem => $(mem elem, $(SUBPACKAGES)), $(packs))

BuildWithCamlimages(subs) =
  # the library is created with -dllib: no -custom required
  OCAML_BYTE_LINK_FLAGS=
  OCAMLINCLUDES += $(SRCDIR)
  subs=core $(subs)
  OCAML_LIBS+= $(addprefix $(SRCDIR)/camlimages_, $(subs))
  OCAML_BYTE_LINK_FLAGS+=-dllpath $(SRCDIR)
  export

###############################################################################

.SUBDIRS: .
