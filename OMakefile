#*********************************************************************#
#                                                                     #
#                          Caml Images                                #
#                                                                     #
#            Franè¼Ÿis Pessaux, projet Cristal, INRIA Rocquencourt     #
#            Pierre Weis, projet Cristal, INRIA Rocquencourt          #
#            Jun Furuse, projet Cristal, INRIA Rocquencourt           #
#                                                                     #
#  Copyright 1999-2004,                                               #
#  Institut National de Recherche en Informatique et en Automatique.  #
#  Distributed only by permission.                                    #
#                                                                     #
#*********************************************************************#

include OMyMakeroot

########################################## External arguments

# Specify directories where X's rgb.txt can be found
PATH_RGB_TXT[]=
  /etc/X11
  /usr/share/X11

########################################################################

VERSION=4.1.0

# for src/META
PACKAGE_NAME=camlimages
PACKAGE_VERSION=$(VERSION)

OCAMLMKLIB=ocamlmklib

##################################################### Auto configuration

with_default(def, varname) =
    if $(not $(defined $(varname))) 
      return $(def)
    else
      getvar($(varname))

true_if_not_defined(var)=
    with_default(true, $(var))

failwith_if_defined(var, msg) =
  if $(defined $(var)):
      eprintln(Error: $(msg))
      exit 1

get_have(varname) =
    with_default(false, this.HAVE_$(varname)) # this required

get_support(varname) =
    with_default(false, this.SUPPORT_$(varname)) # this required

print_configured() =
  println(--- Configuring)
  println(wordsize  $(WORD_SIZE))
  println(--- C libraries)
  println(libgif:   $(get_have GIF))
  println(libpng:   $(get_have PNG))
  println(libjpeg:  $(get_have JPEG))
  println(libexif:  $(get_have EXIF))
  println(libtiff:  $(get_have TIFF))
  println(libxpm:   $(get_have XPM))
  println(libz:     $(get_have Z))
  println(--- Subpackages)
  println(gif:      $(get_support GIF) \($(string $(LDFLAGS_gif)\)))
  println(png:      $(get_support PNG) \($(string $(LDFLAGS_png)\)))
  println(jpeg:     $(get_support JPEG) \($(string $(LDFLAGS_jpeg)\)))
  println(exif:     $(get_support EXIF) \($(string $(LDFLAGS_exif)\)))
  println(tiff:     $(get_support TIFF) \($(string $(LDFLAGS_tiff)\)))
  println(xpm:      $(get_support XPM) \($(string $(LDFLAGS_xpm)\)))
  println(freetype: $(get_support FREETYPE) \($(PATH_FREETYPE_CONFIG)\) \($(string $(LDFLAGS_freetype))\))
  println(ps:       $(get_support PS) \($(PATH_GS)\))
  println(rgb.txt:  $(get_support RGB_TXT) \($(string $(PATH_RGB_TXT))\))
  println(lablgtk2: $(get_support LABLGTK2))
  println(graphics: $(get_support GRAPHICS))
  println(--- Summary)
  println(supported subpackages: $(string $(SUPPORTED_SUBPACKAGES)))
  println(supported formats:     $(string $(SUPPORTED_FORMATS)))
  println(supported non-formats: $(string $(SUPPORTED_NON_FORMATS)))
  println(--- Global compilation switch)
  # CFLAGS and LDFLAGS are already defined when print_configured()
  # is defined, so using CFLAGS here just prints the value of 
  # when this function is defined.
  # CR jfuruse: Something messy which I do not understand yet happens here!
  println(CFLAGS:   $(string $(CAMLIMAGES_CFLAGS)))
  println(LDFLAGS:  $(string $(CAMLIMAGES_LDFLAGS)))
  println(---)

.STATIC:
  # Variables must be initialized inside .STATIC, if they should be
  # exported out.

  if $(not $(OCAMLFIND_EXISTS))
     eprintln(This project requires ocamlfind\, but is was not found.)
     eprintln(You need to install ocamlfind and run "omake --configure".)
     exit 1

  OCAMLMKLIB_EXISTS = $(CheckProg $(OCAMLMKLIB))
  if $(not $(OCAMLMKLIB_EXISTS))
     eprintln(This project requires ocamlmklib, but is was not found.)
     eprintln(You need to install ocamlmklib and run "omake --configure".)
     exit 1

  BYTE_ENABLED=1
  if $(not $(defined NATIVE_ENABLED)):
      setvar(public.NATIVE_ENABLED, 1)
      export

  # It seems changing CFLAGS and INCLUDES in .STATIC is not a good idea.
  CAMLIMAGES_CFLAGS = $(CFLAGS) $(addprefix -I , $(INCLUDES))

  WORD_SIZE = $(Word_size)

  # Image formats implemented using external libraries or binaries
  FORMATS= gif png jpeg exif tiff xpm ps

  # Image formats with necessary libraries supported
  SUPPORTED_FORMATS[]=

  # GUI/font rendering libraries supported
  SUPPORTED_NON_FORMATS[]=

  # SUPPORTED_FORMATS + SUPPORTED_NON_FORMATS
  SUPPORTED_SUBPACKAGES[]=

  # OCaml packages found likable
  OCAMLPACKS[]=

  # Zlib

  HAVE_Z = $(Check_header_library z, zlib.h, zlibVersion)

  # GIF
  LDFLAGS_gif=
  if $(true_if_not_defined ARG_WANT_GIF)
    HAVE_GIF = $(Check_header_library gif, gif_lib.h, DGifOpenFileName)
    SUPPORT_GIF = $(HAVE_GIF)
    if $(SUPPORT_GIF)
      LDFLAGS_gif=-lgif
      SUPPORTED_FORMATS+=gif
      export
    else
      failwith_if_defined(ARG_WANT_GIF, gif requested but not found)
    export

  # PNG
  LDFLAGS_png=
  if $(true_if_not_defined ARG_WANT_PNG)
    HAVE_PNG = $(Check_header_library png, png.h, png_create_read_struct)
    SUPPORT_PNG = $(and $(HAVE_Z) $(HAVE_PNG))
    if $(SUPPORT_PNG)
      LDFLAGS_png=-lpng -lz
      SUPPORTED_FORMATS+=png
      export
    else
      failwith_if_defined(ARG_WANT_PNG, png requested but not found)
    export

  # JPEG
  LDFLAGS_jpeg=
  if $(true_if_not_defined ARG_WANT_JPEG)
    HAVE_JPEG = $(Check_header_library jpeg, jpeglib.h, jpeg_read_header)
    SUPPORT_JPEG = $(HAVE_JPEG)
    if $(SUPPORT_JPEG)
      LDFLAGS_jpeg=-ljpeg
      SUPPORTED_FORMATS+=jpeg
      export
    else
      failwith_if_defined(ARG_WANT_JPEG, jpeg requested but not found)
    export

  # EXIF
  LDFLAGS_exif=
  if $(true_if_not_defined ARG_WANT_EXIF)
    HAVE_EXIF = $(Check_header_library exif, exif-data.h, exif_data_load_data)
    SUPPORT_EXIF = $(HAVE_EXIF)
    if $(SUPPORT_EXIF)
      LDFLAGS_exif=-lexif
      SUPPORTED_FORMATS+=exif
      export
    else
      failwith_if_defined(ARG_WANT_EXIF, exif requested but not found)
    export

  # TIFF
  LDFLAGS_tiff=
  if $(true_if_not_defined ARG_WANT_TIFF)
    HAVE_TIFF = $(Check_header_library tiff, tiff.h, TIFFOpen)
    SUPPORT_TIFF = $(and $(HAVE_Z) $(HAVE_JPEG) $(HAVE_TIFF))
    if $(SUPPORT_TIFF)
      LDFLAGS_tiff=$(array -ltiff -ljpeg -lz)
      SUPPORTED_FORMATS+=tiff
      export
    else
      failwith_if_defined(ARG_WANT_TIFF, tiff requested but not found)
    export

  # XPM
  LDFLAGS_xpm=
  if $(true_if_not_defined ARG_WANT_XPM)
    HAVE_XPM = $(Check_header_library Xpm, X11/xpm.h, XpmReadFileToXpmImage)
    SUPPORT_XPM = $(HAVE_XPM)
    if $(SUPPORT_XPM)
      LDFLAGS_xpm=-lXpm
      SUPPORTED_FORMATS+=xpm
      export
    else
      failwith_if_defined(ARG_WANT_XPM, xpm requested but not found)
    export

  # PS
  LDFLAGS_ps=
  if $(true_if_not_defined ARG_WANT_GS)
    PATH_GS=$(Check_prog_in_path gs)
    SUPPORT_PS=$(if $(PATH_GS), true, false)
    if $(defined ARG_PATH_GS):
        PATH_GS = $(ARG_PATH_GS)
        export
    if $(SUPPORT_PS)
      SUPPORTED_FORMATS+=ps
      export
    else
      failwith_if_defined(ARG_WANT_GS, ps requested but not found)
    export

  # LABLGTK2
  if $(true_if_not_defined ARG_WANT_LABLGTK2)
    SUPPORT_LABLGTK2 = $(Check_ocamlfind_package lablgtk2)
    if $(SUPPORT_LABLGTK2)
      SUPPORTED_NON_FORMATS+=lablgtk2
      OCAMLPACKS+=lablgtk2
      export
    else
      failwith_if_defined(ARG_WANT_LABLGTK2, lablgtk2 requested but not found)
    export

  # GRAPHICS
  if $(true_if_not_defined ARG_WANT_GRAPHICS)
    # CR: ocamlfind registers graphics even if not available
    SUPPORT_GRAPHICS = $(Check_ocamlfind_package_compilation graphics, Graphics)
    if $(SUPPORT_GRAPHICS)
      SUPPORTED_NON_FORMATS+=graphics
      OCAMLPACKS+=graphics
      export
    else
      failwith_if_defined(ARG_WANT_GRAPHICS, graphics requested but not found)
    export

  # FREETYPE
  LDFLAGS_freetype=
  if $(true_if_not_defined ARG_WANT_FREETYPE)
    PATH_FREETYPE_CONFIG=
    if $(defined ARG_FREETYPE_CONFIG):
        PATH_FREETYPE_CONFIG = $(ARG_FREETYPE_CONFIG)
        SUPPORT_FREETYPE = true
        export
    else
        PATH_FREETYPE_CONFIG = $(Check_prog_in_path freetype-config)
        SUPPORT_FREETYPE=$(if $(PATH_FREETYPE_CONFIG), true, false)
        export
    if $(SUPPORT_FREETYPE)
      # println(SUPPORT_FREETYPE=$(SUPPORT_FREETYPE)!)
      CAMLIMAGES_CFLAGS+= $(shell $(PATH_FREETYPE_CONFIG) --cflags)
      LDFLAGS_freetype= $(shell $(PATH_FREETYPE_CONFIG) --libs)
      export
    if $(SUPPORT_FREETYPE)
      SUPPORTED_NON_FORMATS+=freetype
      export
    else
      failwith_if_defined(ARG_WANT_FREETYPE, freetype requested but not found)
    export

  SUPPORTED_SUBPACKAGES= $(SUPPORTED_FORMATS) $(SUPPORTED_NON_FORMATS)

  SUPPORT_RGB_TXT = $(Check_file_in_path $(PATH_RGB_TXT), rgb.txt)
  PATH_RGB_TXT = $(WHERE)

  # CR jfuruse: Something messy which I do not understand yet happens here!
  CAMLIMAGES_LDFLAGS=$(LDFLAGS)
  print_configured()

# CR jfuruse: Something messy which I do not understand yet happens here!
CFLAGS=$(CAMLIMAGES_CFLAGS)
LDFLAGS=$(CAMLIMAGES_LDFLAGS)

# for config.h
CGeneratedFiles(config.h)
section:
  PACKAGE=\"camlimages\"
  PACKAGE_BUGREPORT=\"jun.furuse@gmail.com\"
  PACKAGE_NAME=$(PACKAGE)
  PACKAGE_STRING=\"camlimages $(VERSION)\"
  PACKAGE_TARNAME=$(PACKAGE)
  PACKAGE_VERSION=\"$(VERSION)\"
  SIZEOF_LONG=$(WORD_SIZE)
  VERSION=$(PACKAGE_VERSION)
  ConfReplaceConfigH(config.h)

.PHONY: configure
configure:

.SUBDIRS: src test examples
