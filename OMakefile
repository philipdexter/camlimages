#*********************************************************************#
#                                                                     #
#                          Caml Images                                #
#                                                                     #
#            Franè¼Ÿis Pessaux, projet Cristal, INRIA Rocquencourt     #
#            Pierre Weis, projet Cristal, INRIA Rocquencourt          #
#            Jun Furuse, projet Cristal, INRIA Rocquencourt           #
#                                                                     #
#  Copyright 1999-2004,                                               #
#  Institut National de Recherche en Informatique et en Automatique.  #
#  Distributed only by permission.                                    #
#                                                                     #
#*********************************************************************#

include OMyMakeroot

########################################## External arguments

# Specify directories where X's rgb.txt can be found
PATH_RGB_TXT[]=
  /etc/X11
  /usr/share/X11

########################################################################

VERSION=4.1.0

# for src/META
PACKAGE_NAME=camlimages
PACKAGE_VERSION=$(VERSION)

OCAMLMKLIB=ocamlmklib

##################################################### Auto configuration

get_have(varname) =
  # The following tries to get the variable content even if the condition is false!!
  # $(if $(defined this.HAVE_$(varname)), $(getvar this.HAVE_$(varname)), not checked) 
  if $(defined this.HAVE_$(varname))
    value $(getvar this.HAVE_$(varname))
  else
    if $(defined this.CONFIG_$(varname))
      if $(getvar this.CONFIG_$(varname))
        value true
      else
        value false
    else
      value false

get_config(varname) =
  if $(defined this.CONFIG_$(varname))
    value $(getvar this.CONFIG_$(varname))
  else
    value NA

get_config_string(varname) =
  if $(defined this.CONFIG_$(varname))
    o= $(getvar this.CONFIG_$(varname))
    if $(o)
        value $(o.string)
    else
        value NA
  else
    value NA

get_ldflags(varname) =
  if $(defined CONFIG_$(varname))
    o = $(getvar CONFIG_$(varname))
    if $(o.Available)
        value $(o.LDFLAGS)
    else
        value $(EMPTY)
  else
        value $(EMPTY)
#     if $(defined LDFLAGS_$(varname))
#       value $(getvar LDFLAGS_$(varname))
#     else
#       value $(EMPTY)

get_cflags(varname) =
  if $(defined this.CONFIG_$(varname))
    o = $(getvar this.CONFIG_$(varname))
    value o.CFLAGS
  else
    if $(defined CFLAGS_$(varname))
      value $(getvar CFLAGS_$(varname))
    else
      value $(EMPTY)

get_supported(varname) =
  if $(defined this.CONFIG_$(varname))
    o = $(getvar this.CONFIG_$(varname))
    value $(o.Available)
  else
    if $(defined SUPPORTED_$(varname))
      value $(getvar SUPPORTED_$(varname))
    else
      value false

print_configured() =

  println(--- Configuring)
  println(wordsize  $(WORD_SIZE))
  println(--- Pkg-config)
  println(pkg-config: $(PATH_PKG_CONFIG))
  println(--- C libraries)
  println(libz:     $(get_have Z))
  println(libgif:   $(get_have GIF))
  println(libpng:   $(get_have PNG))
  println(libjpeg:  $(get_have JPEG))
  println(libexif:  $(get_have EXIF))
  println(libtiff:  $(get_have TIFF))
  println(libxpm:   $(get_have XPM))
  println(--- Subpackages)
  println(gif:      $(get_supported GIF) \($(get_config_string GIF)\))
  println(png:      $(get_supported PNG) \($(get_config_string PNG)\))
  println(jpeg:     $(get_supported JPEG) \($(get_config_string JPEG)\))
  println(exif:     $(get_supported EXIF) \($(get_config_string EXIF)\))
  println(tiff:     $(get_supported TIFF) \($(get_config_string TIFF)\))
  println(xpm:      $(get_supported XPM)  \($(get_config_string XPM)\))
  println(freetype: $(get_supported FREETYPE) \($(PATH_FREETYPE_CONFIG)\) \($(get_config_string FREETYPE)\))
  println(ps:       $(get_supported PS) \($(get_config_string PS)\))
  println(rgb.txt:  $(get_supported RGB_TXT) \($(string $(PATH_RGB_TXT))\))
  println(lablgtk2: $(get_supported LABLGTK2))
  println(graphics: $(get_supported GRAPHICS))
  println(--- Summary)
  println(supported subpackages: $(string $(SUPPORTED_SUBPACKAGES)))
  println(supported formats:     $(string $(SUPPORTED_FORMATS)))
  println(supported non-formats: $(string $(SUPPORTED_NON_FORMATS)))
  println(--- Global compilation switch)
  # CFLAGS and LDFLAGS are already defined when print_configured()
  # is defined, so using CFLAGS here just prints the value of 
  # when this function is defined.
  # CR jfuruse: Something messy which I do not understand yet happens here!
  println(CFLAGS:   $(string $(CAMLIMAGES_CFLAGS)))
  println(LDFLAGS:  $(string $(CAMLIMAGES_LDFLAGS)))
  println(---)

true_if_not_defined(var)=
    if $(not $(defined $(var))) 
      value true
    else
      value $(getvar $(var))

false_if_not_defined(var)=
    if $(not $(defined $(var))) 
      value false
    else
      value $(getvar $(var))

failwith_if_defined(var, msg) =
  if $(defined $(var)):
      eprintln(Error: $(msg))
      exit 1

GET_PATH_GS() =
    if $(defined ARG_PATH_GS):
        value $(ARG_PATH_GS)
    else
	value $(Check_prog_in_path gs)

.STATIC:
  # Variables must be initialized inside .STATIC, if they should be
  # exported out.

  if $(not $(OCAMLFIND_EXISTS))
     eprintln(This project requires ocamlfind\, but is was not found.)
     eprintln(You need to install ocamlfind and run "omake --configure".)
     exit 1

  OCAMLMKLIB_EXISTS = $(CheckProg $(OCAMLMKLIB))
  if $(not $(OCAMLMKLIB_EXISTS))
     eprintln(This project requires ocamlmklib, but is was not found.)
     eprintln(You need to install ocamlmklib and run "omake --configure".)
     exit 1

  BYTE_ENABLED=1
  if $(not $(defined NATIVE_ENABLED)):
      setvar(public.NATIVE_ENABLED, 1)
      export

  # It seems changing CFLAGS and INCLUDES in .STATIC is not a good idea.
  CAMLIMAGES_CFLAGS = $(CFLAGS) $(addprefix -I , $(INCLUDES))

  WORD_SIZE = $(Word_size)

  # Image formats implemented using external libraries or binaries
  FORMATS= gif png jpeg exif tiff xpm ps

  # Image formats with necessary libraries supported
  SUPPORTED_FORMATS[]=

  # GUI/font rendering libraries supported
  SUPPORTED_NON_FORMATS[]=

  # SUPPORTED_FORMATS + SUPPORTED_NON_FORMATS
  SUPPORTED_SUBPACKAGES[]=

  # OCaml packages found linkable
  OCAMLPACKS[]=

  # pkg-config
  PATH_PKG_CONFIG = $(Check_prog_in_path pkg-config) 

  HAVE_Z = $(Check_header_library z, zlib.h, zlibVersion)

  # GIF
  if $(true_if_not_defined ARG_WANT_GIF)
    CONFIG_GIF=$(by_pkg_config libgif)
    if $(not $(CONFIG_GIF.Available))
      HAVE_GIF = $(Check_header_library gif, gif_lib.h, DGifOpenFileName)
      if $(HAVE_GIF)
        CONFIG_GIF. =
           extends $(Config)
           LDFLAGS=-lgif
        export CONFIG_GIF
      else
        failwith_if_defined(ARG_WANT_GIF, gif requested but not found)
      export
    export

  # PNG	
  if $(true_if_not_defined ARG_WANT_PNG)
    CONFIG_PNG=$(by_pkg_config libpng)
    if $(not $(CONFIG_PNG.Available))
      HAVE_PNG = $(Check_header_library png, png.h, png_create_read_struct)
      if $(and $(HAVE_Z) $(HAVE_PNG))
        CONFIG_PNG. =
           extends $(Config)
           LDFLAGS=-lpng -lz
        export CONFIG_PNG
      else
        failwith_if_defined(ARG_WANT_PNG, png requested but not found)
      export
    export

  # JPEG	
  if $(true_if_not_defined ARG_WANT_JPEG)
    CONFIG_JPEG=$(by_pkg_config libjpeg)
    if $(not $(CONFIG_JPEG.Available))
      HAVE_JPEG = $(Check_header_library jpeg, jpeglib.h, jpeg_read_header)
      if $(HAVE_JPEG)
        CONFIG_JPEG. =
           extends $(Config)
           LDFLAGS=-ljpeg
        export CONFIG_JPEG
      else
        failwith_if_defined(ARG_WANT_JPEG, jpeg requested but not found)
      export
    export

  # EXIF
  if $(true_if_not_defined ARG_WANT_EXIF)
    CONFIG_EXIF=$(by_pkg_config libexif)
    if $(not $(CONFIG_EXIF.Available))
      HAVE_EXIF = $(Check_header_library exif, exif-data.h, exif_data_load_data)
      if $(HAVE_EXIF)
	CONFIG_EXIF. =
           extends $(Config)
	   LDFLAGS=-lexif
        export CONFIG_EXIF
      else
        failwith_if_defined(ARG_WANT_EXIF, exif requested but not found)
      export
    export

  # TIFF
  if $(true_if_not_defined ARG_WANT_TIFF)
    CONFIG_TIFF=$(by_pkg_config libtiff-4)
    if $(not $(CONFIG_TIFF.Available))  
      HAVE_TIFF = $(Check_header_library tiff, tiff.h, TIFFOpen)
      if $(and $(HAVE_Z) $(HAVE_JPEG) $(HAVE_TIFF))
	CONFIG_TIFF. =
          extends $(Config)
	  LDFLAGS=-ltiff -ljpeg -lz
        export CONFIG_TIFF
      else
        failwith_if_defined(ARG_WANT_TIFF, tiff requested but not found)
      export
    export

  # XPM
  if $(true_if_not_defined ARG_WANT_XPM)
    CONFIG_XPM=$(by_pkg_config xpm)
    if $(not $(CONFIG_XPM).Available)  
      HAVE_XPM = $(Check_header_library Xpm, X11/xpm.h, XpmReadFileToXpmImage)
      if $(HAVE_XPM)
	CONFIG_XPM. =
          extends $(Config)
	  LDFLAGS=-lXpm
        export CONFIG_XPM
      else
        failwith_if_defined(ARG_WANT_XPM, xpm requested but not found)
      export
    export

  # PS
  if $(true_if_not_defined ARG_WANT_GS)
    PATH_GS = $(GET_PATH_GS)
    if $(not $(PATH_GS))
        failwith_if_defined(ARG_WANT_GS, ps requested but not found)
	export PATH_GS
    if $(PATH_GS)
	x = $(PATH_GS) # We must bind to a new variable otherwise PATH_GS is resolved later
        CONFIG_PS. =
           extends $(Config)
           PATH=$(x)
           string() =
               value $(x)
        export CONFIG_PS
    else
      println(PATH_GS not found)
      CONFIG_PS. =
	   extends $(Invalid)
      export CONFIG_PS
    export

  # LABLGTK2
  SUPPORT_LABLGTK2=false
  if $(true_if_not_defined ARG_WANT_LABLGTK2)
    SUPPORT_LABLGTK2 = $(Check_ocamlfind_package lablgtk2)
    if $(SUPPORT_LABLGTK2)
      SUPPORTED_NON_FORMATS+=lablgtk2
      OCAMLPACKS+=lablgtk2
      export
    else
      failwith_if_defined(ARG_WANT_LABLGTK2, lablgtk2 requested but not found)
    export

  # GRAPHICS
  SUPPORT_GRAPHICS=false
  if $(true_if_not_defined ARG_WANT_GRAPHICS)
    # CR: ocamlfind registers graphics even if not available
    SUPPORT_GRAPHICS = $(Check_ocamlfind_package_compilation graphics, Graphics)
    if $(SUPPORT_GRAPHICS)
      SUPPORTED_NON_FORMATS+=graphics
      OCAMLPACKS+=graphics
      export
    else
      failwith_if_defined(ARG_WANT_GRAPHICS, graphics requested but not found)
    export

  # FREETYPE
  PATH_FREETYPE_CONFIG=
  if $(true_if_not_defined ARG_WANT_FREETYPE)
    if $(defined ARG_FREETYPE_CONFIG)
      SUPPORT_FREETYPE = true
      PATH_FREETYPE_CONFIG = $(ARG_FREETYPE_CONFIG)
      export
    else
      PATH_FREETYPE_CONFIG = $(Check_prog_in_path freetype-config)
      export
    if $(PATH_FREETYPE_CONFIG)
      # Strange scoping... 	
      CFLAGS_= $(shell $(PATH_FREETYPE_CONFIG) --cflags)
      LDFLAGS_= $(shell $(PATH_FREETYPE_CONFIG) --libs)
      CONFIG_FREETYPE. =
        extends $(Config)
        CFLAGS=$(CFLAGS_)
        LDFLAGS=$(LDFLAGS_)
      export
    else
      failwith_if_defined(ARG_WANT_FREETYPE, freetype requested but not found)
    export

  SUPPORTED_SUBPACKAGES= $(SUPPORTED_FORMATS) $(SUPPORTED_NON_FORMATS)

  SUPPORT_RGB_TXT = $(Check_file_in_path $(PATH_RGB_TXT), rgb.txt)
  PATH_RGB_TXT = $(WHERE)

  # CR jfuruse: Something messy which I do not understand yet happens here!
  CAMLIMAGES_LDFLAGS=$(LDFLAGS)
  print_configured()

# CR jfuruse: Something messy which I do not understand yet happens here!
CFLAGS=$(CAMLIMAGES_CFLAGS)
LDFLAGS=$(CAMLIMAGES_LDFLAGS)

# for config.h
CGeneratedFiles(config.h)
section:
  PACKAGE=\"camlimages\"
  PACKAGE_BUGREPORT=\"jun.furuse@gmail.com\"
  PACKAGE_NAME=$(PACKAGE)
  PACKAGE_STRING=\"camlimages $(VERSION)\"
  PACKAGE_TARNAME=$(PACKAGE)
  PACKAGE_VERSION=\"$(VERSION)\"
  SIZEOF_LONG=$(WORD_SIZE)
  VERSION=$(PACKAGE_VERSION)
  ConfReplaceConfigH(config.h)

.PHONY: configure
configure:

.SUBDIRS: src test examples
